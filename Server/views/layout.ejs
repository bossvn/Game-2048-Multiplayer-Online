<!DOCTYPE html>
<html prefix="og: http://ogp.me/ns#">
<head>
  <title><%= typeof title == 'undefined' ? 'Oh My Idol' : title %></title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <link rel="shortcut icon" href="/ico/favicon.ico">

  <link rel="apple-touch-icon" sizes="57x57" href="/ico/apple-icon-57x57.png">
  <link rel="apple-touch-icon" sizes="60x60" href="/ico/apple-icon-60x60.png">
  <link rel="apple-touch-icon" sizes="72x72" href="/ico/apple-icon-72x72.png">
  <link rel="apple-touch-icon" sizes="76x76" href="/ico/apple-icon-76x76.png">
  <link rel="apple-touch-icon" sizes="114x114" href="/ico/apple-icon-114x114.png">
  <link rel="apple-touch-icon" sizes="120x120" href="/ico/apple-icon-120x120.png">
  <link rel="apple-touch-icon" sizes="144x144" href="/ico/apple-icon-144x144.png">
  <link rel="apple-touch-icon" sizes="152x152" href="/ico/icoapple-icon-152x152.png">
  <link rel="apple-touch-icon" sizes="180x180" href="/ico/apple-icon-180x180.png">
  <link rel="icon" type="image/png" sizes="192x192" href="/ico/android-icon-192x192.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/ico/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="96x96" href="/ico/favicon-96x96.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/ico/favicon-16x16.png">
  <link rel="manifest" href="/ico/manifest.json">
  <meta name="msapplication-TileColor" content="#ffffff">
  <meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
  <meta name="theme-color" content="#ffffff">
  <link rel="apple-touch-startup-image" href="meta/apple-touch-startup-image-640x1096.png"
        media="(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)"> <!-- iPhone 5+ -->
  <link rel="apple-touch-startup-image" href="meta/apple-touch-startup-image-640x920.png"
        media="(device-width: 320px) and (device-height: 480px) and (-webkit-device-pixel-ratio: 2)">
  <!-- iPhone, retina -->
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="google-site-verification" content="_Y_yO2_2sRGr6tsaSlsJ9YBWPWT5gvI-l53SI86fG_g"/>
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport"
        content="width=device-width, target-densitydpi=160dpi, initial-scale=1.0, maximum-scale=1, user-scalable=no, minimal-ui">
  <meta property="fb:pages" content="1138673726154485" />
  <meta property="fb:app_id" content="820836384715901" />

  <meta property="og:title" content="<%= typeof title == 'undefined' ? 'Oh My Idol' : title %>" />
  <meta property="og:type" content="game" />
  <meta property="og:description"
        content="<%= typeof title == 'undefined' ? 'Best Game For You Idol' : 'Best Game For You Idol .:'+ title + ':.' %>" />
  <meta property="og:url" content="<%= typeof game == 'undefined' ? 'http://ohmyidol.com' : 'http://ohmyidol.com/game/'+game.slug %>" />
  <meta property="og:image" content="<%= typeof game == 'undefined' ? 'http://ohmyidol.com/images/ICON.png' : game.background %>" />
  <!--
      Stylesheets and Preprocessors
      ==============================

      You can always bring in CSS files manually with `<link>` tags, or asynchronously
      using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
      of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, stylesheets from your `assets/styles` folder are included
      here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
      are supported. In production, your styles will be minified and concatenated into
      a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your CSS files
          + Import stylesheets from other directories
          + Use a different or additional preprocessor, like SASS, SCSS or Stylus
  -->

  <!--STYLES-->
  <link rel="stylesheet" href="/min/production.min.css">
  <!--STYLES END-->
</head>

<body>
  <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: "ca-pub-8928671125395435",
      enable_page_level_ads: true
    });
  </script>
<%- body %>


<!--
    Client-side Templates
    ========================

    HTML templates are important prerequisites of modern, rich client applications.
    To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
    that you load these templates client-side.

    By default, your Gruntfile is configured to automatically load and precompile
    client-side JST templates in your `assets/templates` folder, then
    include them here automatically (between TEMPLATES and TEMPLATES END).

    To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Import templates from other directories
        + Use a different template engine (handlebars, jade, dust, etc.)
        + Internationalize your client-side templates using a server-side
          stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->


<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->
  <script src="//cdnjs.cloudflare.com/ajax/libs/mobile-detect/1.3.2/mobile-detect.min.js"></script>
<!--SCRIPTS-->
<script src="/min/production.min.js"></script>
<!--SCRIPTS END-->
<script>
  (function (i, s, o, g, r, a, m) {
    i['GoogleAnalyticsObject'] = r;
    i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
      }, i[r].l = 1 * new Date();
    a = s.createElement(o),
      m = s.getElementsByTagName(o)[0];
    a.async = 1;
    a.src = g;
    m.parentNode.insertBefore(a, m)
  })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

  ga('create', 'UA-79000351-1', 'auto');
  ga('send', 'pageview');
</script>

</body>
</html>
